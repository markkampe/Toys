#!/bin/bash
# 	
# re-create a new /etc/hosts.allow
#
#   - We use hosts.allow to prevent ssh attempts from unknown addresses.  We only
#     accept ssh from our two homes or from one trusted external site.
#   - We have to use real IP addresses, because the DDNS names do not support
#     reverse lookup.
#   - After a power failure, our cable modem is likely to be allocated a new IP address,
#     which is not yet listed in hosts.allow or known to ddns.net.
#

# start with DNS addresses
BINAH=`host binah.ddns.net | cut -d" " -f 4`
HOD=`host sagredo.ddns.net | cut -d" " -f 4`

# but the local address is likely to have changed recently
MY_NAME=`hostname`
if [ "$MYNAME" == "Hod" ] 
then
    HOD=`curl -s ifconfig.me`
else
    BINAH=`curl -s ifconfig.me`
fi

# anybody on the local network(s) is allowed to try to log in
LOCAL1='192.168.1.*'
LOCAL4='192.168.4.*'

OUTSIDE='knuth.cs.hmc.edu, 134.173.42.235'

cat <<- EOF > hosts.allow
	# /etc/hosts.allow: list of hosts that are allowed to access the system.
	#                   See the manual pages hosts_access(5) and hosts_options(5).
	#
	# Example:    ALL: LOCAL @some_netgroup
	#             ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
	#
	# If you're going to protect the portmapper use the name "rpcbind" for the
	# daemon name. See rpcbind(8) and rpc.mountd(8) for further information.
	#
	# SSH connections are only allowed from:
	#     LA desktop, Tall Pines desktop
	#     the local network
	#     a few external trusted hosts 
EOF
echo "sshd: $HOD, $BINAH, $LOCAL1, $LOCAL4, $OUTSIDE"	>> hosts.allow

cat hosts.allow

echo
echo "To install new version:"
echo "  % sudo cp hosts.allow /etc"
echo "  % sudo systemctl restart ssh"
